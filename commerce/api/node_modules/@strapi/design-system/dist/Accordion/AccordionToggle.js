import { jsx as i, jsxs as c, Fragment as R } from "react/jsx-runtime";
import { CarretDown as A } from "@strapi/icons";
import y from "styled-components";
import { TextButton as I } from "../TextButton/TextButton.js";
import { Typography as S } from "../Typography/Typography.js";
import { Flex as $ } from "../Flex/Flex.js";
import { Stack as b } from "../Stack/Stack.js";
import { Icon as W } from "../Icon/Icon.js";
import { AccordionTypography as D } from "./Accordion.js";
import { useAccordion as F } from "./AccordionContext.js";
import { getBackground as L } from "./utils.js";
const P = y(I)`
  text-align: left;

  // necessary to make the ellipsis prop work on the title
  > span {
    max-width: 100%;
  }

  svg {
    width: ${14 / 16}rem;
    height: ${14 / 16}rem;

    path {
      fill: ${({
  theme: o,
  expanded: e
}) => e ? o.colors.primary600 : o.colors.neutral500};
    }
  }
`, U = y($)`
  min-height: ${({
  theme: o,
  size: e
}) => o.sizes.accordions[e]};
  border-radius: ${({
  theme: o,
  expanded: e
}) => e ? `${o.borderRadius} ${o.borderRadius} 0 0` : o.borderRadius};

  &:hover {
    svg {
      path {
        fill: ${({
  theme: o
}) => o.colors.primary600};
      }
    }
  }
`, Z = ({
  title: o,
  description: e,
  as: w = "span",
  togglePosition: d = "right",
  action: p,
  ...C
}) => {
  const {
    onToggle: l,
    toggle: g,
    expanded: r,
    id: s,
    size: t,
    variant: k,
    disabled: n
  } = F(), T = `accordion-content-${s}`, m = `accordion-label-${s}`, z = `accordion-desc-${s}`, a = t === "M" ? 6 : 4, h = t === "M" ? a : a - 2, v = L({
    expanded: r,
    disabled: n,
    variant: k
  }), j = {
    as: w,
    fontWeight: t === "S" ? "bold" : void 0,
    id: m,
    textColor: r ? "primary600" : "neutral700",
    ellipsis: !0,
    variant: t === "M" ? "delta" : void 0
  }, B = r ? "primary600" : "neutral600", M = r ? "primary200" : "neutral200", u = t === "M" ? `${32 / 16}rem` : `${24 / 16}rem`, f = () => {
    n || (g && !l ? (console.warn('Deprecation warning: Usage of "toggle" prop in Accordion component is deprecated. This is discouraged and will be removed in the next major release. Please use "onToggle" instead'), g()) : l && l());
  }, x = i($, {
    justifyContent: "center",
    borderRadius: "50%",
    height: u,
    width: u,
    transform: r ? "rotate(180deg)" : void 0,
    "data-strapi-dropdown": !0,
    "aria-hidden": !0,
    as: "span",
    background: M,
    cursor: n ? "not-allowed" : "pointer",
    onClick: f,
    shrink: 0,
    children: i(W, {
      as: A,
      width: t === "M" ? `${11 / 16}rem` : `${8 / 16}rem`,
      color: r ? "primary600" : "neutral600"
    })
  });
  return i(U, {
    paddingBottom: h,
    paddingLeft: a,
    paddingRight: a,
    paddingTop: h,
    background: v,
    expanded: r,
    size: t,
    justifyContent: "space-between",
    cursor: n ? "not-allowed" : "",
    children: c(b, {
      horizontal: !0,
      spacing: 3,
      flex: 1,
      maxWidth: "100%",
      children: [d === "left" && x, i(P, {
        onClick: f,
        "aria-disabled": n,
        "aria-expanded": r,
        "aria-controls": T,
        "aria-labelledby": m,
        "data-strapi-accordion-toggle": !0,
        expanded: r,
        type: "button",
        flex: 1,
        minWidth: 0,
        ...C,
        children: c(R, {
          children: [i(D, {
            ...j,
            children: o
          }), e && i(S, {
            as: "p",
            id: z,
            textColor: B,
            children: e
          })]
        })
      }), d === "right" && c(b, {
        horizontal: !0,
        spacing: 3,
        children: [x, p]
      }), d === "left" && p]
    })
  });
};
export {
  Z as AccordionToggle
};
