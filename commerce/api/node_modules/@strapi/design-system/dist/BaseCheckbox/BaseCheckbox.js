import { jsx as a } from "react/jsx-runtime";
import { useRef as s, useEffect as d } from "react";
import p from "styled-components";
import { Box as u } from "../Box/Box.js";
import { getCheckboxSize as c } from "./utils.js";
import b from "./assets/checkmark.js";
import m from "./assets/checkmark-black.js";
const f = p.input`
  height: ${c};
  min-width: ${c};
  margin: 0;
  border-radius: ${({
  theme: r
}) => r.borderRadius};
  border: 1px solid ${({
  theme: r
}) => r.colors.neutral300};
  -webkit-appearance: none;
  background-color: ${({
  theme: r
}) => r.colors.neutral0};
  cursor: pointer;

  &:checked {
    background-color: ${({
  theme: r
}) => r.colors.primary600};
    border: 1px solid ${({
  theme: r
}) => r.colors.primary600};

    &:after {
      content: '';
      display: block;
      position: relative;
      background: url(${b}) no-repeat no-repeat center center;
      width: 10px;
      height: 10px;
      left: 50%;
      top: 50%;
      transform: translateX(-50%) translateY(-50%);
    }

    &:disabled:after {
      background: url(${m}) no-repeat no-repeat center center;
    }
  }

  &:disabled {
    background-color: ${({
  theme: r
}) => r.colors.neutral200};
    border: 1px solid ${({
  theme: r
}) => r.colors.neutral300};
  }

  &:indeterminate {
    background-color: ${({
  theme: r
}) => r.colors.primary600};
    border: 1px solid ${({
  theme: r
}) => r.colors.primary600};

    &:after {
      content: '';
      display: block;
      position: relative;
      color: white;
      height: 2px;
      width: 10px;
      background-color: ${({
  theme: r
}) => r.colors.neutral0};
      left: 50%;
      top: 50%;
      transform: translateX(-50%) translateY(-50%);
    }

    &:disabled {
      background-color: ${({
  theme: r
}) => r.colors.neutral200};
      border: 1px solid ${({
  theme: r
}) => r.colors.neutral300};
      &:after {
        background-color: ${({
  theme: r
}) => r.colors.neutral500};
      }
    }
  }
`, h = ({
  indeterminate: r = !1,
  size: n = "M",
  name: l,
  value: e = !1,
  onValueChange: t,
  ...i
}) => {
  const o = s(null);
  return d(() => {
    o.current && r ? o.current.indeterminate = r : o.current.indeterminate = !1;
  }, [r]), a(u, {
    children: a(f, {
      size: n,
      checked: e,
      onChange: () => {
        t && t(!e);
      },
      type: "checkbox",
      ref: o,
      name: l,
      ...i
    })
  });
};
h.displayName = "BaseCheckbox";
export {
  h as BaseCheckbox
};
