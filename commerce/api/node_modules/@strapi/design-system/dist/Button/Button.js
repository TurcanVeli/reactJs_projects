import { jsxs as y, jsx as e } from "react/jsx-runtime";
import b from "react";
import a, { keyframes as v } from "styled-components";
import { Loader as x } from "@strapi/icons";
import { Typography as c } from "../Typography/Typography.js";
import { Box as n } from "../Box/Box.js";
import { BaseButton as B } from "../BaseButton/BaseButton.js";
import { getDisabledStyle as f, getHoverStyle as S, getActiveStyle as k, getVariantStyle as L } from "./utils.js";
import { DEFAULT as T, BUTTON_SIZES as W } from "./constants.js";
const j = v`
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(359deg);
  }
`, w = a.div`
  animation: ${j} 2s infinite linear;
  will-change: transform;
`, D = a(n)`
  height: 100%;
`, H = a(B)`
  align-items: center;
  background-color: ${({
  theme: t
}) => t.colors.buttonPrimary600};
  border: 1px solid ${({
  theme: t
}) => t.colors.buttonPrimary600};
  height: ${({
  theme: t,
  size: r
}) => t.sizes.button[r]};
  padding-left: ${({
  theme: t
}) => t.spaces[4]};
  padding-right: ${({
  theme: t
}) => t.spaces[4]};

  ${n} {
    display: flex;
    align-items: center;
  }

  ${c} {
    color: ${({
  theme: t
}) => t.colors.buttonNeutral0};
  }

  &[aria-disabled='true'] {
    ${f}
    &:active {
      ${f}
    }
  }
  &:hover {
    ${S}
  }
  &:active {
    ${k}
  }
  ${L}
  ${({
  fullWidth: t
}) => t && `
    display: inline-flex;
    justify-content: center;
    width: 100%;
  `}
`, N = b.forwardRef(({
  variant: t = T,
  startIcon: r,
  endIcon: l,
  disabled: m = !1,
  children: p,
  onClick: d,
  size: s = W[0],
  loading: i = !1,
  fullWidth: h = !1,
  ...g
}, u) => {
  const o = m || i;
  return y(H, {
    ref: u,
    "aria-disabled": o,
    disabled: o,
    size: s,
    variant: t,
    onClick: ($) => {
      !o && d && d($);
    },
    fullWidth: h,
    ...g,
    children: [(r || i) && e(D, {
      "aria-hidden": !0,
      paddingRight: 2,
      children: i ? e(w, {
        children: e(x, {})
      }) : r
    }), e(c, {
      variant: s === "S" ? "pi" : void 0,
      fontWeight: "bold",
      lineHeight: 0,
      children: p
    }), l && e(n, {
      "aria-hidden": !0,
      paddingLeft: 2,
      children: l
    })]
  });
});
N.displayName = "Button";
export {
  N as Button,
  H as ButtonWrapper
};
