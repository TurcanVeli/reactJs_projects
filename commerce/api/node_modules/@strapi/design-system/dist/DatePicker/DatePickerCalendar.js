import e, { useState as L, useEffect as W } from "react";
import a from "prop-types";
import { VisuallyHidden as _ } from "../VisuallyHidden/VisuallyHidden.js";
import { DatePickerPopover as H } from "./components.js";
import { SimpleMenu as s, MenuItem as f } from "../SimpleMenu/SimpleMenu.js";
import { Flex as I } from "../Flex/Flex.js";
import { Box as p } from "../Box/Box.js";
import { RawTable as V } from "../RawTable/RawTable.js";
import "../RawTable/RawCell.js";
import { RawThead as j } from "../RawTable/RawThead.js";
import { RawTbody as z } from "../RawTable/RawTbody.js";
import { RawTr as d } from "../RawTable/RawTr.js";
import { DatePickerTh as r } from "./DatePickerTh.js";
import { DatePickerTd as A } from "./DatePickerTd.js";
import { FocusTrap as G } from "../FocusTrap/FocusTrap.js";
import { getDayOfWeek as J } from "./utils/getDayOfWeek.js";
import { getMonths as K } from "./utils/getMonths.js";
import { generateWeeks as N } from "./utils/generateWeeks.js";
import { getYears as Q } from "./utils/getYears.js";
import { formatDate as U } from "./utils/formatDate.js";
const E = ({
  selectedDate: i,
  initialDate: g,
  popoverSource: D,
  onChange: h,
  label: k,
  minDate: w,
  maxDate: R,
  onEscape: y
}) => {
  const [l, m] = L(g), [u, C, T] = N(l, i), { sun: v, mon: x, tue: M, wed: O, thu: P, fri: b, sat: q } = J(), c = K(), F = Q(w, R);
  W(() => {
    i && m(i);
  }, [i]);
  const Y = (t) => {
    const n = new Date(l);
    n.setMonth(c.indexOf(t)), m(n);
  }, S = (t) => {
    const n = new Date(l);
    n.setFullYear(t), m(n);
  };
  return /* @__PURE__ */ e.createElement(H, {
    source: D,
    role: "dialog",
    "aria-modal": "true",
    "aria-label": k,
    spacing: 4
  }, /* @__PURE__ */ e.createElement(G, {
    onEscape: y
  }, /* @__PURE__ */ e.createElement(p, {
    padding: 4
  }, /* @__PURE__ */ e.createElement(p, {
    paddingBottom: 4,
    paddingLeft: 2,
    paddingRight: 2
  }, /* @__PURE__ */ e.createElement(I, null, /* @__PURE__ */ e.createElement(s, {
    label: c[l.getMonth()]
  }, c.map((t) => /* @__PURE__ */ e.createElement(f, {
    key: t,
    onClick: () => Y(t)
  }, t))), /* @__PURE__ */ e.createElement(p, {
    paddingLeft: 2
  }, /* @__PURE__ */ e.createElement(s, {
    label: l.getFullYear()
  }, F.map((t) => /* @__PURE__ */ e.createElement(f, {
    key: t,
    onClick: () => S(t)
  }, t)))))), /* @__PURE__ */ e.createElement(V, {
    colCount: 7,
    rowCount: u.length + 1,
    initialCol: T,
    initialRow: C,
    role: "grid"
  }, /* @__PURE__ */ e.createElement(j, null, /* @__PURE__ */ e.createElement(d, {
    "aria-rowindex": 1
  }, /* @__PURE__ */ e.createElement(r, null, v), /* @__PURE__ */ e.createElement(r, null, x), /* @__PURE__ */ e.createElement(r, null, M), /* @__PURE__ */ e.createElement(r, null, O), /* @__PURE__ */ e.createElement(r, null, P), /* @__PURE__ */ e.createElement(r, null, b), /* @__PURE__ */ e.createElement(r, null, q))), /* @__PURE__ */ e.createElement(z, null, u.map((t, n) => /* @__PURE__ */ e.createElement(d, {
    key: n
  }, t.map(({ date: o, outsideMonth: $, isSelected: B }) => /* @__PURE__ */ e.createElement(A, {
    key: `${o.getFullYear()}-${o.getMonth() + 1}-${o.getDate()}`,
    outsideMonth: $,
    onSelectDay: () => h(o),
    isSelected: B
  }, /* @__PURE__ */ e.createElement("span", {
    "aria-hidden": !0
  }, o.getDate()), /* @__PURE__ */ e.createElement(_, null, /* @__PURE__ */ e.createElement("span", null, U(o))))))))))));
};
E.defaultProps = {
  selectedDate: void 0,
  initialDate: new Date(),
  minDate: void 0,
  maxDate: void 0
};
E.propTypes = {
  initialDate: a.instanceOf(Date),
  label: a.string.isRequired,
  maxDate: a.instanceOf(Date),
  minDate: a.instanceOf(Date),
  onChange: a.func.isRequired,
  onEscape: a.func.isRequired,
  popoverSource: a.shape({
    current: (typeof Element > "u" ? a.any : a.instanceOf(Element)).isRequired
  }).isRequired,
  selectedDate: a.instanceOf(Date)
};
export {
  E as DatePickerCalendar
};
