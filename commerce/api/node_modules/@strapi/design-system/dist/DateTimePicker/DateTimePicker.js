import r, { useState as P, useEffect as C } from "react";
import { Stack as S } from "../Stack/Stack.js";
import { DatePicker as L } from "../DatePicker/DatePicker.js";
import { TimePicker as R } from "../TimePicker/TimePicker.js";
import { Field as j } from "../Field/Field.js";
import { FieldLabel as z } from "../Field/FieldLabel.js";
import "../Field/FieldInput.js";
import { FieldHint as A } from "../Field/FieldHint.js";
import { FieldError as B } from "../Field/FieldError.js";
import "../Field/FieldContext.js";
import "../Field/FieldAction.js";
import { useId as H } from "../helpers/useId.js";
import { parseDate as M } from "./parseDate.js";
import { dateTimePickerDefaultProps as G, dateTimePickerPropTypes as J } from "./DateTimePickerProps.js";
const w = ({
  ariaLabel: D,
  clearLabel: g,
  disabled: T,
  error: c,
  hint: y,
  label: d,
  labelAction: F,
  onChange: o,
  onClear: p,
  name: E,
  required: f,
  selectButtonTitle: h,
  size: k,
  step: V,
  value: a,
  ...$
}) => {
  const n = M(a), [i, m] = P(n), [l, s] = P(
    n ? `${n.getHours()}:${n.getMinutes()}:${n.getSeconds()}` : null
  ), I = (e) => {
    m(e);
    let t;
    l ? (t = new Date(e), t.setHours(l.split(":")[0]), t.setMinutes(l.split(":")[1])) : (t = new Date(e), s(`${t.getHours()}:${t.getMinutes()}:${t.getSeconds()}`)), o && o(t);
  }, _ = (e) => {
    s(e);
    const t = i ? new Date(i) : new Date();
    t.setHours(e.split(":")[0]), t.setMinutes(e.split(":")[1]), i || m(t), o && o(t);
  }, b = () => {
    m(void 0), s(void 0), p();
  }, v = () => {
    s(void 0);
    let e;
    i && (e = new Date(i), e.setHours("00"), e.setMinutes("00")), o && o(e);
  };
  C(() => {
    if (a && +a != +i) {
      const e = M(a);
      m(e), s(
        e ? `${e.getHours()}:${e.getMinutes()}:${e.getSeconds()}` : null
      );
    } else
      a || (m(void 0), s(void 0));
  }, [a, i]);
  const u = H("datetime-label", $?.id), x = H("datetimepicker");
  return /* @__PURE__ */ r.createElement(j, {
    name: E,
    role: "group",
    id: u,
    "aria-labelledby": u,
    hint: y,
    error: c,
    required: f
  }, /* @__PURE__ */ r.createElement(S, {
    spacing: 1
  }, d && /* @__PURE__ */ r.createElement(z, {
    action: F
  }, d), /* @__PURE__ */ r.createElement(S, {
    horizontal: !0,
    spacing: 2
  }, /* @__PURE__ */ r.createElement(L, {
    "data-testid": "datetimepicker-date",
    id: u,
    name: E,
    ariaLabel: d || D,
    error: typeof c == "string",
    selectedDate: i,
    selectedDateLabel: (e) => `Date picker, current is ${e}`,
    onChange: I,
    required: f,
    size: k,
    onClear: p && b,
    clearLabel: g,
    disabled: T,
    ...$
  }), /* @__PURE__ */ r.createElement(R, {
    "data-testid": "datetimepicker-time",
    size: k,
    "aria-label": d || D,
    error: typeof c == "string",
    value: l,
    onChange: _,
    onClear: p && v,
    clearLabel: g,
    required: f,
    selectButtonTitle: h,
    disabled: T,
    step: V
  })), /* @__PURE__ */ r.createElement(A, null), /* @__PURE__ */ r.createElement(B, {
    id: x
  })));
};
w.defaultProps = G;
w.propTypes = J;
export {
  w as DateTimePicker
};
