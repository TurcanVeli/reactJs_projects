import t, { forwardRef as k } from "react";
import m from "styled-components";
import r from "prop-types";
import { sizes as I } from "../themes/sizes.js";
import { inputFocusStyle as v } from "../themes/utils.js";
import { useField as x } from "./FieldContext.js";
import { Flex as C } from "../Flex/Flex.js";
import { Box as c } from "../Box/Box.js";
const u = {
  S: 6.5,
  M: 10.5
}, E = m.input`
  border: none;
  border-radius: ${({ theme: e }) => e.borderRadius};
  padding-bottom: ${({ size: e }) => `${u[e] / 16}rem`};
  padding-left: ${({ theme: e, hasLeftAction: o }) => o ? 0 : e.spaces[4]};
  padding-right: ${({ theme: e, hasRightAction: o }) => o ? 0 : e.spaces[4]};
  padding-top: ${({ size: e }) => `${u[e] / 16}rem`};
  cursor: ${(e) => e["aria-disabled"] ? "not-allowed" : void 0};

  color: ${({ theme: e }) => e.colors.neutral800};
  font-weight: 400;
  // TODO: Make sure to use the theme when it's ready
  font-size: ${14 / 16}rem;
  display: block;
  width: 100%;
  background: inherit;

  ::placeholder {
    color: ${({ theme: e }) => e.colors.neutral500};
    opacity: 1;
  }

  &[aria-disabled='true'] {
    color: inherit;
  }

  //focus managed by InputWrapper
  &:focus {
    outline: none;
    box-shadow: none;
  }
`, F = m(C)`
  border: 1px solid ${({ theme: e, hasError: o }) => o ? e.colors.danger600 : e.colors.neutral200};
  border-radius: ${({ theme: e }) => e.borderRadius};
  background: ${({ theme: e }) => e.colors.neutral0};
  ${v()}

  ${({ theme: e, disabled: o }) => o ? `
    color: ${e.colors.neutral600};
    background: ${e.colors.neutral150};
  
  ` : void 0}
`, d = k(({ endAction: e, startAction: o, disabled: a, onChange: f, size: s, ...g }, b) => {
  const { id: n, error: l, hint: h, name: $, required: y } = x();
  let i;
  l ? i = `${n}-error` : h && (i = `${n}-hint`);
  const p = Boolean(l), w = (R) => {
    a || f(R);
  };
  return /* @__PURE__ */ t.createElement(F, {
    size: s,
    justifyContent: "space-between",
    hasError: p,
    disabled: a
  }, o && /* @__PURE__ */ t.createElement(c, {
    paddingLeft: 3,
    paddingRight: 2
  }, o), /* @__PURE__ */ t.createElement(E, {
    id: n,
    name: $,
    ref: b,
    "aria-describedby": i,
    "aria-invalid": p,
    "aria-disabled": a,
    hasLeftAction: Boolean(o),
    hasRightAction: Boolean(e),
    onChange: w,
    "aria-required": y,
    size: s,
    ...g
  }), e && /* @__PURE__ */ t.createElement(c, {
    paddingLeft: 2,
    paddingRight: 3
  }, e));
});
d.displayName = "FieldInput";
d.defaultProps = {
  disabled: !1,
  endAction: void 0,
  size: "M",
  startAction: void 0,
  onChange() {
  }
};
d.propTypes = {
  disabled: r.bool,
  endAction: r.element,
  onChange: r.func,
  size: r.oneOf(Object.keys(I.input)),
  startAction: r.element
};
export {
  d as FieldInput,
  F as InputWrapper
};
