import d, { useRef as E, useEffect as f } from "react";
import u from "prop-types";
import { getFocusableNodes as l } from "../helpers/getFocusableNodes.js";
import { KeyboardKeys as i } from "../helpers/keyboardKeys.js";
const a = ({ onEscape: o, restoreFocus: n, ...m }) => {
  const r = E(null);
  f(() => {
    let e = null;
    return n && (e = document.activeElement), () => {
      e && e.focus();
    };
  }, [n]), f(() => {
    if (!r.current)
      return;
    const e = l(r.current);
    e.length > 0 ? e[0].focus() : console.warn(
      "[FocusTrap]: it seems there are no focusable elements in the focus trap tree. Make sure there s at least one."
    );
  }, []);
  const p = (e) => {
    if (e.key === i.ESCAPE && o) {
      o();
      return;
    }
    if (e.key !== i.TAB)
      return;
    const t = l(r.current);
    if (t.length > 0) {
      const s = t[0], c = t[t.length - 1];
      e.shiftKey ? s === document.activeElement && (e.preventDefault(), c.focus()) : c === document.activeElement && (e.preventDefault(), s.focus());
    }
  };
  return /* @__PURE__ */ d.createElement("div", {
    ref: r,
    onKeyDown: p,
    ...m
  });
};
a.defaultProps = {
  onEscape: void 0,
  restoreFocus: !0
};
a.propTypes = {
  onEscape: u.func,
  restoreFocus: u.bool
};
export {
  a as FocusTrap
};
