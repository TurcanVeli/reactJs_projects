import l, { cloneElement as b } from "react";
import t from "prop-types";
import h from "styled-components";
import { Tooltip as v } from "../Tooltip/Tooltip.js";
import { BaseButton as y } from "../BaseButton/BaseButton.js";
import { Flex as k } from "../Flex/Flex.js";
import { VisuallyHidden as $ } from "../VisuallyHidden/VisuallyHidden.js";
const s = h(y)`
  display: flex;
  align-items: center;
  justify-content: center;
  height: ${32 / 16}rem;
  width: ${32 / 16}rem;

  svg {
    > g,
    path {
      fill: ${({ theme: r }) => r.colors.neutral500};
    }
  }
  &:hover {
    svg {
      > g,
      path {
        fill: ${({ theme: r }) => r.colors.neutral600};
      }
    }
  }
  &:active {
    svg {
      > g,
      path {
        fill: ${({ theme: r }) => r.colors.neutral400};
      }
    }
  }
  &[aria-disabled='true'] {
    background-color: ${({ theme: r }) => r.colors.neutral150};
    svg {
      path {
        fill: ${({ theme: r }) => r.colors.neutral600};
      }
    }
  }
  ${({ noBorder: r }) => r ? "border: none;" : void 0}
`, T = h(k)`
  & span:first-child button {
    border-left: 1px solid ${({ theme: r }) => r.colors.neutral200};
    border-radius: ${({ theme: r }) => `${r.borderRadius} 0 0 ${r.borderRadius}`};
  }

  & span:last-child button {
    border-radius: ${({ theme: r }) => `0 ${r.borderRadius} ${r.borderRadius} 0`};
  }

  & ${s} {
    border-radius: 0;
    border-left: none;

    svg {
      path {
        fill: ${({ theme: r }) => r.colors.neutral700};
      }
    }

    &:hover {
      background-color: ${({ theme: r }) => r.colors.neutral100};

      svg {
        path {
          fill: ${({ theme: r }) => r.colors.neutral800};
        }
      }
    }

    &:active {
      background-color: ${({ theme: r }) => r.colors.neutral150};
      svg {
        path {
          fill: ${({ theme: r }) => r.colors.neutral900};
        }
      }
    }

    &[aria-disabled='true'] {
      svg {
        path {
          fill: ${({ theme: r }) => r.colors.neutral600};
        }
      }
    }
  }
`, d = l.forwardRef(
  ({ label: r, noBorder: n, children: o, icon: e, disabled: a, onClick: c, "aria-label": m, ...u }, f) => {
    const p = (g) => {
      !a && c && c(g);
    };
    return r ? /* @__PURE__ */ l.createElement(v, {
      label: r
    }, /* @__PURE__ */ l.createElement(s, {
      ...u,
      ref: f,
      noBorder: n,
      onClick: p,
      "aria-disabled": a
    }, /* @__PURE__ */ l.createElement($, {
      as: "span"
    }, r), b(e || o, {
      "aria-hidden": !0,
      focusable: !1
    }))) : /* @__PURE__ */ l.createElement(s, {
      ...u,
      ref: f,
      noBorder: n,
      onClick: p,
      "aria-disabled": a
    }, /* @__PURE__ */ l.createElement($, {
      as: "span"
    }, m), b(e || o, {
      "aria-hidden": !0,
      focusable: !1
    }));
  }
);
d.displayName = "IconButton";
d.defaultProps = {
  "aria-label": void 0,
  children: void 0,
  disabled: !1,
  icon: void 0,
  label: void 0,
  noBorder: !1,
  onClick: void 0
};
const i = (r, n) => (o, e) => !o[e] && r.every((a) => !o[a]) ? new Error(`One of the following props is required: ${e}, ${r.join(", ")}`) : t.checkPropTypes({ [e]: t[n] }, o, "prop", "IconButton");
d.propTypes = {
  "aria-label": i(["label"], "string"),
  children: i(["icon"], "node"),
  disabled: t.bool,
  icon: i(["children"], "node"),
  label: i(["aria-label"], "string"),
  noBorder: t.bool,
  onClick: t.func
};
export {
  d as IconButton,
  T as IconButtonGroup
};
