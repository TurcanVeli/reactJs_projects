import o, { useRef as s, useEffect as J } from "react";
import t from "prop-types";
import { json as x, jsonParseLinter as H } from "@codemirror/lang-json";
import { useCodeMirror as I } from "@uiw/react-codemirror";
import { Field as L } from "../Field/Field.js";
import { FieldLabel as T } from "../Field/FieldLabel.js";
import "../Field/FieldInput.js";
import { FieldHint as P } from "../Field/FieldHint.js";
import { FieldError as R } from "../Field/FieldError.js";
import "../Field/FieldContext.js";
import "../Field/FieldAction.js";
import { Stack as j } from "../Stack/Stack.js";
import { JSONInputContainer as q } from "./JSONInputContainer.js";
import { markField as z, addMarks as B, lineHighlightMark as _, filterMarks as w } from "./utils/decorationExtension.js";
const g = ({ label: d, value: E, error: u, hint: b, required: S, onChange: C, disabled: O, labelAction: k, ...F }) => {
  const a = s(), i = s(null), l = s(null), m = Boolean(u), v = (e) => i.current?.doc?.line(e), y = (e) => {
    const { text: r, to: n } = v(e), c = n - r.trimStart().length;
    n > c && l.current?.dispatch({
      effects: B.of([_.range(c, n)])
    });
  }, M = () => {
    const e = i.current?.doc?.length || 0;
    l.current?.dispatch({
      effects: w.of((r, n) => n <= 0 || r >= e)
    });
  }, f = (e) => {
    const { view: r, state: n } = e;
    l.current = r, i.current = n, M();
    const p = H()(r);
    p.length && y(n.doc.lineAt(p[0].from).number);
  }, N = (e, r) => {
    f(r), C(e);
  }, A = (e, r) => {
    l.current = e, i.current = r, f({ view: e, state: r });
  }, { setContainer: h } = I({
    value: E,
    onCreateEditor: A,
    theme: "dark",
    onChange: N,
    editable: !O,
    container: a.current,
    extensions: [x(), z],
    basicSetup: {
      lineNumbers: !0,
      bracketMatching: !0,
      closeBrackets: !0,
      indentOnInput: !0,
      syntaxHighlighting: !0,
      highlightSelectionMatches: !0,
      tabSize: 2,
      defaultCharacterWidth: 5
    }
  });
  return J(() => {
    const e = a.current;
    e && h(e);
  }, [h, m]), /* @__PURE__ */ o.createElement(L, {
    error: u,
    hint: b,
    required: S
  }, /* @__PURE__ */ o.createElement(j, {
    spacing: 1
  }, d && /* @__PURE__ */ o.createElement(T, {
    action: k
  }, d), /* @__PURE__ */ o.createElement(q, {
    ref: a,
    hasError: m,
    alignItems: "stretch",
    fontSize: 2,
    hasRadius: !0,
    ...F
  }), /* @__PURE__ */ o.createElement(R, null), /* @__PURE__ */ o.createElement(P, null)));
};
g.defaultProps = {
  label: void 0,
  labelAction: void 0,
  value: "",
  error: void 0,
  hint: void 0,
  required: !1,
  disabled: !1,
  onChange() {
  }
};
g.propTypes = {
  label: t.string,
  labelAction: t.element,
  value: t.string,
  error: t.oneOfType([t.string, t.bool]),
  hint: t.oneOfType([t.string, t.node, t.arrayOf(t.node)]),
  required: t.bool,
  disabled: t.bool,
  onChange: t.func
};
export {
  g as JSONInput
};
