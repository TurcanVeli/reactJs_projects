import e, { useRef as h, useState as E, useEffect as v } from "react";
import b from "styled-components";
import n from "prop-types";
import { Typography as c } from "../Typography/Typography.js";
import { Box as i } from "../Box/Box.js";
import { Flex as l } from "../Flex/Flex.js";
import { useElementOnScreen as R } from "../helpers/useElementOnScreen.js";
import { useResizeObserver as w } from "../helpers/useResizeObserver.js";
const x = () => {
  const t = h(null), [o, a] = E(null), [r, d] = R({
    root: null,
    rootMargin: "0px",
    threshold: 0
  });
  return w(r, () => {
    r.current && a(r.current.getBoundingClientRect());
  }), v(() => {
    t.current && a(t.current.getBoundingClientRect());
  }, [t]), {
    containerRef: r,
    isVisible: d,
    baseHeaderLayoutRef: t,
    headerSize: o
  };
}, p = (t) => {
  const { containerRef: o, isVisible: a, baseHeaderLayoutRef: r, headerSize: d } = x();
  return /* @__PURE__ */ e.createElement(e.Fragment, null, /* @__PURE__ */ e.createElement("div", {
    style: { height: d?.height },
    ref: o
  }, a && /* @__PURE__ */ e.createElement(s, {
    ref: r,
    ...t
  })), !a && /* @__PURE__ */ e.createElement(s, {
    ...t,
    sticky: !0,
    width: d?.width
  }));
};
p.displayName = "HeaderLayout";
const L = b(i)`
  position: fixed;
  top: 0;
  right: 0;
  width: ${(t) => t.width}px;
  z-index: 4;
  box-shadow: ${({ theme: t }) => t.shadows.tableShadow};
`, s = e.forwardRef(
  ({ navigationAction: t, primaryAction: o, secondaryAction: a, subtitle: r, title: d, sticky: f, width: g, ...u }, y) => {
    const m = typeof r == "string";
    return f ? /* @__PURE__ */ e.createElement(L, {
      paddingLeft: 6,
      paddingRight: 6,
      paddingTop: 3,
      paddingBottom: 3,
      background: "neutral0",
      width: g,
      "data-strapi-header-sticky": !0
    }, /* @__PURE__ */ e.createElement(l, {
      justifyContent: "space-between"
    }, /* @__PURE__ */ e.createElement(l, null, t && /* @__PURE__ */ e.createElement(i, {
      paddingRight: 3
    }, t), /* @__PURE__ */ e.createElement(i, null, /* @__PURE__ */ e.createElement(c, {
      variant: "beta",
      as: "h1",
      ...u
    }, d), m ? /* @__PURE__ */ e.createElement(c, {
      variant: "pi",
      textColor: "neutral600"
    }, r) : r), a ? /* @__PURE__ */ e.createElement(i, {
      paddingLeft: 4
    }, a) : null), /* @__PURE__ */ e.createElement(l, null, o ? /* @__PURE__ */ e.createElement(i, {
      paddingLeft: 2
    }, o) : void 0))) : /* @__PURE__ */ e.createElement(i, {
      ref: y,
      paddingLeft: 10,
      paddingRight: 10,
      paddingBottom: 8,
      paddingTop: t ? 6 : 8,
      background: "neutral100",
      "data-strapi-header": !0
    }, t ? /* @__PURE__ */ e.createElement(i, {
      paddingBottom: 2
    }, t) : null, /* @__PURE__ */ e.createElement(l, {
      justifyContent: "space-between"
    }, /* @__PURE__ */ e.createElement(l, null, /* @__PURE__ */ e.createElement(c, {
      as: "h1",
      variant: "alpha",
      ...u
    }, d), a ? /* @__PURE__ */ e.createElement(i, {
      paddingLeft: 4
    }, a) : null), o), m ? /* @__PURE__ */ e.createElement(c, {
      variant: "epsilon",
      textColor: "neutral600",
      as: "p"
    }, r) : r);
  }
);
s.displayName = "BaseHeaderLayout";
s.defaultProps = {
  navigationAction: void 0,
  primaryAction: void 0,
  secondaryAction: void 0,
  subtitle: void 0,
  sticky: !1,
  width: void 0
};
s.propTypes = {
  navigationAction: n.node,
  primaryAction: n.node,
  secondaryAction: n.node,
  sticky: n.bool,
  subtitle: n.oneOfType([n.string, n.node]),
  title: n.string.isRequired,
  width: n.number
};
p.defaultProps = {
  navigationAction: void 0,
  primaryAction: void 0,
  secondaryAction: void 0,
  subtitle: void 0
};
p.propTypes = {
  navigationAction: n.node,
  primaryAction: n.node,
  secondaryAction: n.node,
  subtitle: n.oneOfType([n.string, n.node]),
  title: n.string.isRequired
};
export {
  s as BaseHeaderLayout,
  p as HeaderLayout
};
