import r, { forwardRef as y } from "react";
import n from "prop-types";
import s from "styled-components";
import { ExternalLink as g } from "@strapi/icons";
import { NavLink as h } from "react-router-dom";
import { Typography as m } from "../Typography/Typography.js";
import { Box as E } from "../Box/Box.js";
import { buttonFocusStyle as L } from "../themes/utils.js";
const $ = s.a`
  display: inline-flex;
  align-items: center;
  text-decoration: none;
  pointer-events: ${({ disabled: e }) => e ? "none" : void 0};
  color: ${({ disabled: e, theme: o }) => e ? o.colors.neutral600 : o.colors.primary600};

  svg path {
    transition: fill 150ms ease-out;
    fill: currentColor;
  }

  svg {
    font-size: ${10 / 16}rem;
  }

  ${m} {
    transition: color 150ms ease-out;
    color: currentColor;
  }

  &:hover {
    color: ${({ theme: e }) => e.colors.primary500};
  }

  &:active {
    color: ${({ theme: e }) => e.colors.primary700};
  }

  ${L};
`, i = s(E)`
  display: flex;
`, a = y(({ href: e, to: o, children: c, disabled: t, startIcon: l, endIcon: d, ...p }, f) => {
  const u = e ? "_blank" : void 0, v = e ? "noreferrer noopener" : void 0;
  return /* @__PURE__ */ r.createElement($, {
    as: o && !t ? h : "a",
    target: u,
    rel: v,
    to: t ? void 0 : o,
    href: t ? "#" : e,
    disabled: t,
    ref: f,
    ...p
  }, l && /* @__PURE__ */ r.createElement(i, {
    as: "span",
    "aria-hidden": !0,
    paddingRight: 2
  }, l), /* @__PURE__ */ r.createElement(m, null, c), d && !e && /* @__PURE__ */ r.createElement(i, {
    as: "span",
    "aria-hidden": !0,
    paddingLeft: 2
  }, d), e && /* @__PURE__ */ r.createElement(i, {
    as: "span",
    "aria-hidden": !0,
    paddingLeft: 2
  }, /* @__PURE__ */ r.createElement(g, null)));
});
a.displayName = "Link";
a.defaultProps = {
  endIcon: void 0,
  href: void 0,
  to: void 0,
  disabled: !1,
  startIcon: void 0
};
a.propTypes = {
  children: n.node.isRequired,
  disabled: n.bool,
  endIcon: n.element,
  href(e) {
    if (!e.disabled && !e.to && !e.href)
      return new Error("href must be defined");
  },
  startIcon: n.element,
  to(e) {
    if (!e.disabled && !e.href && !e.to)
      return new Error("to must be defined");
  }
};
export {
  a as Link
};
