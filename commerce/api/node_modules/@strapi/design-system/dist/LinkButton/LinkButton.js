import t from "react";
import { NavLink as g } from "react-router-dom";
import y from "styled-components";
import r from "prop-types";
import { Typography as a } from "../Typography/Typography.js";
import { Box as d } from "../Box/Box.js";
import { getDisabledStyle as c, getHoverStyle as h, getActiveStyle as S, getVariantStyle as k } from "../Button/utils.js";
import { BUTTON_SIZES as E, VARIANTS as x } from "../Button/constants.js";
import { BaseButtonWrapper as B } from "../BaseButton/BaseButton.js";
const L = y(B)`
  padding: ${({ theme: e, size: o }) => `${o === "S" ? e.spaces[2] : "10px"} ${e.spaces[4]}`};
  background: ${({ theme: e }) => e.colors.buttonPrimary600};
  border: 1px solid ${({ theme: e }) => e.colors.buttonPrimary600};
  border-radius: ${({ theme: e }) => e.borderRadius};
  ${d} {
    display: flex;
    align-items: center;
  }
  ${a} {
    color: ${({ theme: e }) => e.colors.buttonNeutral0};
  }
  &[aria-disabled='true'] {
    ${c}
    &:active {
      ${c}
    }
  }
  &:hover {
    ${h}
  }
  &:active {
    ${S}
  }
  ${k}
  /**
    Link specific properties
  */
  display: inline-flex;
  text-decoration: none;
  pointer-events: ${({ disabled: e }) => e ? "none" : void 0};
`, l = t.forwardRef(
  ({ variant: e, startIcon: o, endIcon: f, disabled: i, children: s, size: m, href: n, to: p, ...u }, v) => {
    const b = n ? "_blank" : void 0, $ = n ? "noreferrer noopener" : void 0;
    return /* @__PURE__ */ t.createElement(L, {
      ref: v,
      "aria-disabled": i,
      size: m,
      variant: e,
      target: b,
      rel: $,
      to: i ? void 0 : p,
      href: i ? "#" : n,
      ...u,
      as: p && !i ? g : "a"
    }, o && /* @__PURE__ */ t.createElement(d, {
      "aria-hidden": !0,
      paddingRight: 2
    }, o), m === "S" ? /* @__PURE__ */ t.createElement(a, {
      variant: "pi",
      fontWeight: "bold"
    }, s) : /* @__PURE__ */ t.createElement(a, {
      fontWeight: "bold"
    }, s), f && /* @__PURE__ */ t.createElement(d, {
      "aria-hidden": !0,
      paddingLeft: 2
    }, f));
  }
);
l.displayName = "LinkButton";
l.defaultProps = {
  disabled: !1,
  startIcon: void 0,
  endIcon: void 0,
  size: "S",
  variant: "default",
  onClick: void 0,
  href: void 0,
  to: void 0
};
l.propTypes = {
  children: r.node.isRequired,
  disabled: r.bool,
  endIcon: r.element,
  href(e) {
    if (!e.disabled && !e.to && !e.href)
      return new Error("href must be defined");
  },
  onClick: r.func,
  size: r.oneOf(E),
  startIcon: r.element,
  to(e) {
    if (!e.disabled && !e.href && !e.to)
      return new Error("to must be defined");
  },
  variant: r.oneOf(x)
};
export {
  l as LinkButton
};
