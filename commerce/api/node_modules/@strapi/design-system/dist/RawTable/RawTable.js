import m, { useRef as D, useState as k, useCallback as R, useEffect as d } from "react";
import s from "prop-types";
import { RawTableContext as _ } from "./RawTableContext.js";
import { KeyboardKeys as a } from "../helpers/keyboardKeys.js";
import { focusFocusable as G } from "./focusFocusable.js";
const y = ({ colCount: i, rowCount: l, jumpStep: n, initialCol: p, initialRow: E, ...P }) => {
  const f = D(null), u = D(!1), [o, r] = k(E), [b, c] = k(p), T = R(({ colIndex: t, rowIndex: e }) => {
    c(t), r(e);
  }, []);
  d(() => {
    u.current && G(f.current), u.current || (u.current = !0);
  }, [b, o]);
  const K = (t) => {
    switch (t.key) {
      case a.RIGHT: {
        t.preventDefault(), c((e) => e < i - 1 ? e + 1 : e);
        break;
      }
      case a.LEFT: {
        t.preventDefault(), c((e) => e > 0 ? e - 1 : e);
        break;
      }
      case a.UP: {
        t.preventDefault(), r((e) => e > 0 ? e - 1 : e);
        break;
      }
      case a.DOWN: {
        t.preventDefault(), r((e) => e < l - 1 ? e + 1 : e);
        break;
      }
      case a.HOME: {
        t.preventDefault(), t.ctrlKey && r(0), c(0);
        break;
      }
      case a.END: {
        t.preventDefault(), t.ctrlKey && r(l - 1), c(i - 1);
        break;
      }
      case a.PAGE_DOWN: {
        t.preventDefault(), r((e) => e + n < l ? e + n : l - 1);
        break;
      }
      case a.PAGE_UP: {
        t.preventDefault(), r((e) => e - n > 0 ? e - n : 0);
        break;
      }
    }
  };
  return /* @__PURE__ */ m.createElement(_.Provider, {
    value: { rowIndex: o, colIndex: b, setTableValues: T }
  }, /* @__PURE__ */ m.createElement("table", {
    role: "grid",
    ref: f,
    "aria-rowcount": l,
    "aria-colcount": i,
    onKeyDown: K,
    ...P
  }));
};
y.defaultProps = {
  jumpStep: 3,
  initialCol: 0,
  initialRow: 0
};
y.propTypes = {
  colCount: s.number.isRequired,
  initialCol: s.number,
  initialRow: s.number,
  jumpStep: s.number,
  rowCount: s.number.isRequired
};
export {
  y as RawTable
};
