import t, { useRef as E, useImperativeHandle as g } from "react";
import e from "prop-types";
import { Field as T } from "../Field/Field.js";
import { FieldLabel as y } from "../Field/FieldLabel.js";
import { FieldInput as I } from "../Field/FieldInput.js";
import { FieldHint as A } from "../Field/FieldHint.js";
import { FieldError as x } from "../Field/FieldError.js";
import "../Field/FieldContext.js";
import "../Field/FieldAction.js";
import { Stack as F } from "../Stack/Stack.js";
import { sizes as O } from "../themes/sizes.js";
import { useId as R } from "../helpers/useId.js";
const i = t.forwardRef(
  ({ size: l, startAction: m, endAction: p, name: d, hint: s, error: c, label: r, labelAction: f, id: u, required: b, ...o }, n) => {
    const v = R("textinput", u), a = E(null);
    if (!r && !o["aria-label"])
      throw new Error('The TextInput component needs a "label" or an "aria-label" props');
    return g(n, () => ({
      inputWrapperRef: a
    })), /* @__PURE__ */ t.createElement("div", {
      ref: a
    }, /* @__PURE__ */ t.createElement(T, {
      name: d,
      hint: s,
      error: c,
      id: v,
      required: b
    }, /* @__PURE__ */ t.createElement(F, {
      spacing: 1
    }, r && /* @__PURE__ */ t.createElement(y, {
      action: f
    }, r), /* @__PURE__ */ t.createElement(I, {
      size: l,
      ref: n,
      startAction: m,
      endAction: p,
      ...o
    }), /* @__PURE__ */ t.createElement(A, null), /* @__PURE__ */ t.createElement(x, null))));
  }
);
i.displayName = "TextInput";
i.defaultProps = {
  "aria-label": void 0,
  label: void 0,
  labelAction: void 0,
  error: void 0,
  hint: void 0,
  id: void 0,
  startAction: void 0,
  size: "M",
  endAction: void 0,
  required: !1
};
i.propTypes = {
  "aria-label": e.string,
  endAction: e.element,
  error: e.oneOfType([e.string, e.bool]),
  hint: e.oneOfType([e.string, e.node, e.arrayOf(e.node)]),
  id: e.string,
  label: e.string,
  labelAction: e.element,
  name: e.string.isRequired,
  required: e.bool,
  size: e.oneOf(Object.keys(O.input)),
  startAction: e.element
};
export {
  i as TextInput
};
