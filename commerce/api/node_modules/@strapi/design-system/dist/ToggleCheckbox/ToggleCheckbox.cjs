"use strict";Object.defineProperties(exports,{__esModule:{value:!0},[Symbol.toStringTag]:{value:"Module"}});const m=require("react"),T=require("prop-types"),w=require("styled-components"),v=require("../themes/sizes.cjs"),k=require("../themes/utils.cjs"),p=require("../Typography/Typography.cjs"),R=require("../VisuallyHidden/VisuallyHidden.cjs"),L=require("../Box/Box.cjs");require("../Field/Field.cjs");require("../Field/FieldLabel.cjs");require("../Field/FieldInput.cjs");const _=require("../Field/FieldContext.cjs");require("../Field/FieldAction.cjs");const E=require("../Flex/Flex.cjs"),d=e=>e&&typeof e=="object"&&"default"in e?e:{default:e},l=d(m),o=d(T),i=d(w),$=i.default.label`
  position: relative;
  display: inline-block;
  z-index: 0;
  width: 100%;
`,z=i.default(L.Box)`
  cursor: ${({disabled:e})=>e?"not-allowed":void 0};
  // Masks the background of each value
  overflow: hidden;
  flex-wrap: wrap;

  ${k.inputFocusStyle()}
`,f=i.default(E.Flex).attrs({hasRadius:!0})`
  background-color: ${({theme:e,checked:n,disabled:a})=>n?a?e.colors.neutral200:e.colors.neutral0:"transparent"};
  border: 1px solid
    ${({theme:e,checked:n,disabled:a})=>n&&n!==null?a?e.colors.neutral300:e.colors.neutral200:a?e.colors.neutral150:e.colors.neutral100};
  position: relative;
  user-select: none;
  z-index: 2;
  flex: 1 1 50%;
  /**
    We declare the defined value because we want the height of the input when 
    the values are in a row to be 40px. But defining a height on the label
    would break the input when it wraps.
  */
  padding-top: ${({size:e})=>`${e==="S"?"2px":"6px"}`};
  padding-bottom: ${({size:e})=>`${e==="S"?"2px":"6px"}`};
`,B=i.default.input`
  height: 100%;
  left: 0;
  opacity: 0;
  position: absolute;
  top: 0;
  z-index: 1;
  width: 100%;
`,u=l.default.forwardRef(({size:e,onLabel:n,offLabel:a,children:g,checked:t,disabled:r,onChange:h,...x},y)=>{const{name:b,required:C}=_.useField(),c="neutral600";let q=!t&&t!==null?"danger700":c,F=t?"primary600":c;const j=s=>{r||h(s)};return l.default.createElement($,null,l.default.createElement(R.VisuallyHidden,null,g),l.default.createElement(z,{hasRadius:!0,disabled:r,padding:1,display:"flex",background:r?"neutral150":"neutral100",borderStyle:"solid",borderWidth:"1px",borderColor:"neutral200"},l.default.createElement(f,{size:e,paddingLeft:3,paddingRight:3,justifyContent:"center",alignItems:"center","aria-hidden":!0,checked:t===null?!1:!t,disabled:r},l.default.createElement(p.Typography,{variant:"pi",fontWeight:"bold",textTransform:"uppercase",textColor:r?"neutral700":q},a)),l.default.createElement(f,{size:e,paddingLeft:3,paddingRight:3,justifyContent:"center",alignItems:"center","aria-hidden":!0,checked:t===null?!1:t,disabled:r},l.default.createElement(p.Typography,{variant:"pi",fontWeight:"bold",textTransform:"uppercase",textColor:r?"neutral700":F},n)),l.default.createElement(B,{type:"checkbox","aria-disabled":r,onChange:s=>j(s),name:b,ref:y,"aria-required":C,...x,checked:!(t===null||!t)})))});u.displayName="ToggleCheckbox";u.defaultProps={disabled:!1,checked:!1,onChange:void 0,size:"M"};u.propTypes={checked:o.default.bool,children:o.default.string.isRequired,disabled:o.default.bool,offLabel:o.default.string.isRequired,onChange:o.default.func,onLabel:o.default.string.isRequired,size:o.default.oneOf(Object.keys(v.sizes.input))};exports.ToggleCheckbox=u;
