import r from "react";
import n from "prop-types";
import i from "styled-components";
import { sizes as v } from "../themes/sizes.js";
import { inputFocusStyle as k } from "../themes/utils.js";
import { Typography as d } from "../Typography/Typography.js";
import { VisuallyHidden as R } from "../VisuallyHidden/VisuallyHidden.js";
import { Box as E } from "../Box/Box.js";
import "../Field/Field.js";
import "../Field/FieldLabel.js";
import "../Field/FieldInput.js";
import { useField as T } from "../Field/FieldContext.js";
import "../Field/FieldAction.js";
import { Flex as $ } from "../Flex/Flex.js";
const L = i.label`
  position: relative;
  display: inline-block;
  z-index: 0;
  width: 100%;
`, q = i(E)`
  cursor: ${({ disabled: e }) => e ? "not-allowed" : void 0};
  // Masks the background of each value
  overflow: hidden;
  flex-wrap: wrap;

  ${k()}
`, f = i($).attrs({
  hasRadius: !0
})`
  background-color: ${({ theme: e, checked: l, disabled: a }) => l ? a ? e.colors.neutral200 : e.colors.neutral0 : "transparent"};
  border: 1px solid
    ${({ theme: e, checked: l, disabled: a }) => l && l !== null ? a ? e.colors.neutral300 : e.colors.neutral200 : a ? e.colors.neutral150 : e.colors.neutral100};
  position: relative;
  user-select: none;
  z-index: 2;
  flex: 1 1 50%;
  /**
    We declare the defined value because we want the height of the input when 
    the values are in a row to be 40px. But defining a height on the label
    would break the input when it wraps.
  */
  padding-top: ${({ size: e }) => `${e === "S" ? "2px" : "6px"}`};
  padding-bottom: ${({ size: e }) => `${e === "S" ? "2px" : "6px"}`};
`, z = i.input`
  height: 100%;
  left: 0;
  opacity: 0;
  position: absolute;
  top: 0;
  z-index: 1;
  width: 100%;
`, u = r.forwardRef(
  ({ size: e, onLabel: l, offLabel: a, children: c, checked: t, disabled: o, onChange: m, ...g }, h) => {
    const { name: b, required: x } = T(), s = "neutral600";
    let y = !t && t !== null ? "danger700" : s, C = t ? "primary600" : s;
    const w = (p) => {
      o || m(p);
    };
    return /* @__PURE__ */ r.createElement(L, null, /* @__PURE__ */ r.createElement(R, null, c), /* @__PURE__ */ r.createElement(q, {
      hasRadius: !0,
      disabled: o,
      padding: 1,
      display: "flex",
      background: o ? "neutral150" : "neutral100",
      borderStyle: "solid",
      borderWidth: "1px",
      borderColor: "neutral200"
    }, /* @__PURE__ */ r.createElement(f, {
      size: e,
      paddingLeft: 3,
      paddingRight: 3,
      justifyContent: "center",
      alignItems: "center",
      "aria-hidden": !0,
      checked: t === null ? !1 : !t,
      disabled: o
    }, /* @__PURE__ */ r.createElement(d, {
      variant: "pi",
      fontWeight: "bold",
      textTransform: "uppercase",
      textColor: o ? "neutral700" : y
    }, a)), /* @__PURE__ */ r.createElement(f, {
      size: e,
      paddingLeft: 3,
      paddingRight: 3,
      justifyContent: "center",
      alignItems: "center",
      "aria-hidden": !0,
      checked: t === null ? !1 : t,
      disabled: o
    }, /* @__PURE__ */ r.createElement(d, {
      variant: "pi",
      fontWeight: "bold",
      textTransform: "uppercase",
      textColor: o ? "neutral700" : C
    }, l)), /* @__PURE__ */ r.createElement(z, {
      type: "checkbox",
      "aria-disabled": o,
      onChange: (p) => w(p),
      name: b,
      ref: h,
      "aria-required": x,
      ...g,
      checked: !(t === null || !t)
    })));
  }
);
u.displayName = "ToggleCheckbox";
u.defaultProps = {
  disabled: !1,
  checked: !1,
  onChange: void 0,
  size: "M"
};
u.propTypes = {
  checked: n.bool,
  children: n.string.isRequired,
  disabled: n.bool,
  offLabel: n.string.isRequired,
  onChange: n.func,
  onLabel: n.string.isRequired,
  size: n.oneOf(Object.keys(v.input))
};
export {
  u as ToggleCheckbox
};
