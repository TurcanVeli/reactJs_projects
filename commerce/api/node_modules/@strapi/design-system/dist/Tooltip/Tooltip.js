import o from "react";
import e from "prop-types";
import v from "styled-components";
import { Box as x } from "../Box/Box.js";
import { Typography as E } from "../Typography/Typography.js";
import { Portal as T } from "../Portal/Portal.js";
import { useTooltipHandlers as h } from "./hooks/useTooltipHandlers.js";
import { useTooltipLayout as R } from "./hooks/useTooltipLayout.js";
import { useId as p } from "../helpers/useId.js";
import { VisuallyHidden as I } from "../VisuallyHidden/VisuallyHidden.js";
const H = v(x)`
  position: absolute;
  /* z-index exist because of its position inside Modals */
  z-index: 4;
  display: ${({ visible: t }) => t ? "revert" : "none"};
`, a = ({ children: t, label: n, description: i, delay: d, position: s, id: m, ...c }) => {
  const r = p("tooltip", m), f = p("description"), { visible: l, ...u } = h(d), { tooltipWrapperRef: b, toggleSourceRef: y } = R(l, s), g = o.cloneElement(t, {
    tabIndex: 0,
    "aria-labelledby": n ? r : void 0,
    "aria-describedby": i ? r : void 0,
    ...u
  });
  return /* @__PURE__ */ o.createElement(o.Fragment, null, /* @__PURE__ */ o.createElement(T, null, /* @__PURE__ */ o.createElement(H, {
    id: r,
    background: "neutral900",
    hasRadius: !0,
    padding: 2,
    role: "tooltip",
    ref: b,
    visible: l,
    ...c
  }, l && /* @__PURE__ */ o.createElement(I, {
    id: f
  }, i), /* @__PURE__ */ o.createElement(E, {
    as: "p",
    variant: "pi",
    fontWeight: "bold",
    textColor: "neutral0"
  }, n || i))), /* @__PURE__ */ o.createElement("span", {
    ref: y
  }, g));
};
a.defaultProps = {
  delay: 500,
  id: void 0,
  position: "top",
  label: void 0,
  description: void 0
};
a.propTypes = {
  children: e.node.isRequired,
  delay: e.number,
  description: e.string,
  id: e.string,
  label: e.string,
  position: e.oneOf(["top", "left", "bottom", "right"])
};
export {
  a as Tooltip
};
