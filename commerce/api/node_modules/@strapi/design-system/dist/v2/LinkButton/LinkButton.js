import t from "react";
import v from "styled-components";
import r from "prop-types";
import { Typography as i } from "../../Typography/Typography.js";
import { Box as a } from "../../Box/Box.js";
import { getDisabledStyle as f, getHoverStyle as y, getActiveStyle as $, getVariantStyle as g } from "../../Button/utils.js";
import { BUTTON_SIZES as h, VARIANTS as S } from "../../Button/constants.js";
import { BaseButtonWrapper as k } from "../../BaseButton/BaseButton.js";
import { BaseLink as m } from "../../BaseLink/BaseLink.js";
const E = v(k)`
  padding: ${({ theme: e, size: o }) => `${o === "S" ? e.spaces[2] : "10px"} ${e.spaces[4]}`};
  background: ${({ theme: e }) => e.colors.buttonPrimary600};
  border: 1px solid ${({ theme: e }) => e.colors.buttonPrimary600};
  border-radius: ${({ theme: e }) => e.borderRadius};
  ${a} {
    display: flex;
    align-items: center;
  }
  ${i} {
    color: ${({ theme: e }) => e.colors.buttonNeutral0};
  }
  &[aria-disabled='true'] {
    ${f}
    &:active {
      ${f}
    }
  }
  &:hover {
    ${y}
  }
  &:active {
    ${$}
  }
  ${g}

  /**
    Link specific properties
  */
  display: inline-flex;
  text-decoration: none;
  pointer-events: ${({ disabled: e }) => e ? "none" : void 0};
`, n = t.forwardRef(
  ({ variant: e, startIcon: o, endIcon: d, disabled: p, children: l, size: s, as: c, ...u }, b) => /* @__PURE__ */ t.createElement(E, {
    ref: b,
    "aria-disabled": p,
    size: s,
    variant: e,
    ...u,
    as: c || m
  }, o && /* @__PURE__ */ t.createElement(a, {
    "aria-hidden": !0,
    paddingRight: 2
  }, o), s === "S" ? /* @__PURE__ */ t.createElement(i, {
    variant: "pi",
    fontWeight: "bold"
  }, l) : /* @__PURE__ */ t.createElement(i, {
    fontWeight: "bold"
  }, l), d && /* @__PURE__ */ t.createElement(a, {
    "aria-hidden": !0,
    paddingLeft: 2
  }, d))
);
n.displayName = "LinkButton";
n.defaultProps = {
  as: m,
  disabled: !1,
  startIcon: void 0,
  endIcon: void 0,
  size: "S",
  variant: "default",
  onClick: void 0,
  href: void 0,
  to: void 0
};
n.propTypes = {
  as: r.elementType,
  children: r.node.isRequired,
  disabled: r.bool,
  endIcon: r.element,
  href(e) {
    if (!e.disabled && !e.to && !e.href)
      return new Error("href must be defined");
  },
  onClick: r.func,
  size: r.oneOf(h),
  startIcon: r.element,
  to(e) {
    if (!e.disabled && !e.href && !e.to)
      return new Error("to must be defined");
  },
  variant: r.oneOf(S)
};
export {
  n as LinkButton
};
